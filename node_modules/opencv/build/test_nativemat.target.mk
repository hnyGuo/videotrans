# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := test_nativemat
DEFS_Debug := \
	'-DNODE_GYP_MODULE_NAME=test_nativemat' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-m64 \
	-I/usr/include/opencv \
	-Wall \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-std=gnu++0x

INCS_Debug := \
	-I/home/robot/.node-gyp/6.7.0/include/node \
	-I/home/robot/.node-gyp/6.7.0/src \
	-I/home/robot/.node-gyp/6.7.0/deps/uv/include \
	-I/home/robot/.node-gyp/6.7.0/deps/v8/include \
	-I$(srcdir)/-I/usr/include/opencv \
	-I$(srcdir)/../nan \
	-I$(srcdir)/inc

DEFS_Release := \
	'-DNODE_GYP_MODULE_NAME=test_nativemat' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION'

# Flags passed to all source files.
CFLAGS_Release := \
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-m64 \
	-I/usr/include/opencv \
	-Wall \
	-O3 \
	-fno-omit-frame-pointer

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-std=gnu++0x

INCS_Release := \
	-I/home/robot/.node-gyp/6.7.0/include/node \
	-I/home/robot/.node-gyp/6.7.0/src \
	-I/home/robot/.node-gyp/6.7.0/deps/uv/include \
	-I/home/robot/.node-gyp/6.7.0/deps/v8/include \
	-I$(srcdir)/-I/usr/include/opencv \
	-I$(srcdir)/../nan \
	-I$(srcdir)/inc

OBJS := \
	$(obj).target/$(TARGET)/test/nativemat.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := \
	-pthread \
	-rdynamic \
	-m64

LIBS := \
	/usr/lib/x86_64-linux-gnu/libopencv_calib3d.so \
	/usr/lib/x86_64-linux-gnu/libopencv_contrib.so \
	/usr/lib/x86_64-linux-gnu/libopencv_core.so \
	/usr/lib/x86_64-linux-gnu/libopencv_features2d.so \
	/usr/lib/x86_64-linux-gnu/libopencv_flann.so \
	/usr/lib/x86_64-linux-gnu/libopencv_gpu.so \
	/usr/lib/x86_64-linux-gnu/libopencv_highgui.so \
	/usr/lib/x86_64-linux-gnu/libopencv_imgproc.so \
	/usr/lib/x86_64-linux-gnu/libopencv_legacy.so \
	/usr/lib/x86_64-linux-gnu/libopencv_ml.so \
	/usr/lib/x86_64-linux-gnu/libopencv_nonfree.so \
	/usr/lib/x86_64-linux-gnu/libopencv_objdetect.so \
	/usr/lib/x86_64-linux-gnu/libopencv_ocl.so \
	/usr/lib/x86_64-linux-gnu/libopencv_photo.so \
	/usr/lib/x86_64-linux-gnu/libopencv_stitching.so \
	/usr/lib/x86_64-linux-gnu/libopencv_superres.so \
	/usr/lib/x86_64-linux-gnu/libopencv_ts.so \
	/usr/lib/x86_64-linux-gnu/libopencv_video.so \
	/usr/lib/x86_64-linux-gnu/libopencv_videostab.so \
	-lopencv_calib3d \
	-lopencv_contrib \
	-lopencv_core \
	-lopencv_features2d \
	-lopencv_flann \
	-lopencv_gpu \
	-lopencv_highgui \
	-lopencv_imgproc \
	-lopencv_legacy \
	-lopencv_ml \
	-lopencv_nonfree \
	-lopencv_objdetect \
	-lopencv_ocl \
	-lopencv_photo \
	-lopencv_stitching \
	-lopencv_superres \
	-lopencv_ts \
	-lopencv_video \
	-lopencv_videostab

$(obj).target/test_nativemat.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/test_nativemat.node: LIBS := $(LIBS)
$(obj).target/test_nativemat.node: TOOLSET := $(TOOLSET)
$(obj).target/test_nativemat.node: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(obj).target/test_nativemat.node
# Add target alias
.PHONY: test_nativemat
test_nativemat: $(builddir)/test_nativemat.node

# Copy this to the executable output path.
$(builddir)/test_nativemat.node: TOOLSET := $(TOOLSET)
$(builddir)/test_nativemat.node: $(obj).target/test_nativemat.node FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/test_nativemat.node
# Short alias for building this executable.
.PHONY: test_nativemat.node
test_nativemat.node: $(obj).target/test_nativemat.node $(builddir)/test_nativemat.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/test_nativemat.node

